modfit = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
trainpred = predict(modfit$finalModel,newdata=trainSA)
prediction = predict(modfit$finalModel,newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,prediction)
missClass(trainSA$chd,trainpred)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",data=trainSA)
trainpred = predict(modfit$finalModel,newdata=trainSA)
prediction = predict(modfit$finalModel,newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,prediction)
missClass(trainSA$chd,trainpred)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
trainpred = predict(modfit$finalModel,newdata=trainSA)
prediction = predict(modfit$finalModel,newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,prediction)
missClass(trainSA$chd,trainpred)
trainpred = predict(newdata=trainSA,modfit$finalModel)
missClass(prediction,testSA$chd)
missClass(testSA$chd,prediction)
trainpred = predict(modfit$finalModel,newdata=trainSA,type="response")
prediction = predict(modfit$finalModel,newdata=testSA,type="response")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,prediction)
missClass(trainSA$chd,trainpred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
a=factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y=factor(vowel.train$y)
vowel.test$y=factor(vowel.test$y)
modfit = train(y~.,method="rf",data=vowel.train)
modfit = train(y~.,method="rf",data=vowel.train)
varImp(modfit$finalModel)
variableImp = varImp(modfit$finalModel)
sort(variableImp)
varImp(modfit$finalModel)
order(variableImp)
variableImp
variableImp(order(variableImp))
variableImp[order(variableImp)]
variableImp[order(variableImp),]
variableImp
names(variableImp)[order(variableImp)]
variableImp
variableImp[order(variableImp),]
variableImp[,order(variableImp)]
order(variableImp)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y=factor(vowel.train$y)
vowel.test$y=factor(vowel.test$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
variableImp = varImp(modfit$finalModel)
order(variableImp)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y=factor(vowel.train$y)
vowel.test$y=factor(vowel.test$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
variableImp = varImp(modfit$finalModel)
order(variableImp)
variableImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y=factor(vowel.train$y)
vowel.test$y=factor(vowel.test$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
variableImp = varImp(modfit$finalModel)
order(variableImp)
rm(list=ls())
setwd("~/Google Drive/Documents/Courses/Coursera - Practical Machine Learning/assignment/coursera-pml")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
library(caret)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
modfit2 = train(y~.,method="gbm",data=vowel.train)
modfit2 = train(y~.,method="gbm",data=vowel.train)
pred1 = predict(modfit$finalModel, newdata=vowel.test)
pred2 = predict(modfit2$finalModel, newdata=vowel.test)
pred1
modfit
pred2 = predict(modfit2$finalModel, vowel.test)
modfit2
pred2 = predict(modfit2$finalModel, vowel.test, n.trees=150)
pred1
pred2
pred2 = predict(modfit2$finalModel, vowel.test, n.trees=150)
pred2 = predict(modfit2$finalModel, vowel.test, n.trees=150)
pred2 = predict(modfit2$finalModel, vowel.test, n.trees=150)
pred2 = predict(modfit2, vowel.test)
pred1 = predict(modfit, newdata=vowel.test)
pred2 = predict(modfit2, newdata=vowel.test)
pred1
pred2
sum(pred1=vowel.test$y)/length(vowel.test$y)
pred1=vowel.test$y
pred1==vowel.test$y
sum(pred1==vowel.test$y)/length(vowel.test$y)
sum(pred1==vowel.test$y)
pred1 = predict(modfit, newdata=vowel.test)
sum(pred1==vowel.test$y)/length(vowel.test$y)
sum(pred2==vowel.test$y)/length(vowel.test$y)
sum(pred1==vowel.test$y)/length(vowel.test$y)
sum(pred2==vowel.test$y)/length(vowel.test$y)
sum(pred1==pred2)/length(pred1==pred2)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
modfit2 = train(y~.,method="gbm",data=vowel.train)
pred1 = predict(modfit, newdata=vowel.test)
pred2 = predict(modfit2, newdata=vowel.test)
sum(pred1==vowel.test$y)/length(vowel.test$y)
sum(pred2==vowel.test$y)/length(vowel.test$y)
sum(pred1==pred2)/length(pred1==pred2)
agree = pred1[pred1==pred2]
trueagree = vowel.test$y[pred1==pred2]
sum(agree==trueagree)/length(trueagree)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modfit1 = train(diagnosis~.,method="rf",data=training)
modfit2 = train(diagnosis~.,method="gbm",data=training)
modfit3 = train(diagnosis~.,method="lda",data=training)
pred1 = predict(modfit1, newdata=testing)
pred2 = predict(modfit2, newdata=testing)
pred3 = predict(modfit3, newdata=testing)
pred1
sum(pred1==testing$diagnosis)/length(testing$diagnosis)
sum(pred2==testing$diagnosis)/length(testing$diagnosis)
sum(pred3==testing$diagnosis)/length(testing$diagnosis)
predDF = data.frame(pred1,pred2,pred3,diagnosis=testing.diagnosis)
predDF = data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit = train(diagnosis~.,method="rf",data=predDF)
combPred = predict(combModFit,predDF)
sum(combPred==predDF$diagnosis)/length(combPred)
rm(list=ls())
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modfit1 = train(diagnosis~.,method="rf",data=training)
modfit2 = train(diagnosis~.,method="gbm",data=training)
modfit3 = train(diagnosis~.,method="lda",data=training)
pred1 = predict(modfit1, newdata=testing)
pred2 = predict(modfit2, newdata=testing)
pred3 = predict(modfit3, newdata=testing)
sum(pred1==testing$diagnosis)/length(testing$diagnosis)
sum(pred2==testing$diagnosis)/length(testing$diagnosis)
sum(pred3==testing$diagnosis)/length(testing$diagnosis)
predDF = data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit = train(diagnosis~.,method="rf",data=predDF)
combPred = predict(combModFit,predDF)
sum(combPred==predDF$diagnosis)/length(combPred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modfit1 = train(diagnosis~.,method="lasso",data=training)
modfit1 = train(CompressiveStrength~.,method="lasso",data=training)
set.seed(233)
modfit1 = train(CompressiveStrength~.,method="lasso",data=training)
pred1 = predict(modfit1, newdata=testing)
sum(pred1==testing$diagnosis)/length(testing$diagnosis)
sum(pred1==testing$CompressiveStrength)/length(testing$CompressiveStrength)
pred1
testing$CompressiveStrength
?plot.enet
modfit1
modfit1$finalModel$call
modfit1$finalModel
modfit1$finalModel$call
plot.enet(modfit1$finalModel$call)
plot.enet(modfit1$finalModel$call,xvar=fraction)
plot.enet(modfit1)
(modfit1)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modfit1 = train(diagnosis~.,method="rf",data=training)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
modfit = train(y~.,method="rf",data=vowel.train)
modfit2 = train(y~.,method="gbm",data=vowel.train)
pred1 = predict(modfit, newdata=vowel.test)
pred2 = predict(modfit2, newdata=vowel.test)
confusionMatrix(vowel.test$y,pred1)
sum(pred1==vowel.test$y)/length(vowel.test$y)
confusionMatrix(vowel.test$y,pred2)
sum(pred2==vowel.test$y)/length(vowel.test$y)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modfit1 = train(CompressiveStrength~.,method="lasso",data=training)
pred1 = predict(modfit1, newdata=testing)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
plot.enet(modfit1$finalModel, xvar="penalty", use.color=T)
rm(list=ls())
data = read.csv(file="gaData.csv")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
bats(tstrain)
fit = bats(tstrain)
plot(forecast(fit))
(forecast(fit))
testing
(forecast(fit,h=100))
(forecast(fit,h=(600-365))
(forecast(fit,h=(600-365))
)
plot(forecast(fit,h=(600-365)))
testing
testing$visitsTumblr<
pred1 = (forecast(fit,h=(600-365)))
pred1$upper
pred1$lower
pred1
testing$visitsTumblr<=pred1$lower[,2]
testing$visitsTumblr<=pred1$upper[,2]&&testing$visitsTumblr>=pred1$lower[,2]
testing$visitsTumblr<=pred1$upper[,2]&testing$visitsTumblr>=pred1$lower[,2]
sum(testing$visitsTumblr<=pred1$upper[,2]&testing$visitsTumblr>=pred1$lower[,2])
sum(testing$visitsTumblr<=pred1$upper[,2]&testing$visitsTumblr>=pred1$lower[,2])/length(testing$visitsTumblr)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
install.packages("e1071")
?e1071
model1 = svm(CompressiveStrength~.,data=training)
library("e1071")
set.seed(325)
model1 = svm(CompressiveStrength~.,data=training)
predict.svm(model1,newdata = testing)
predict(model1,newdata = testing)
pred1 = predict(model1,newdata = testing)
sqrt(sum((pred1-testing$CompressiveStrength)^2)/length(pred1))
source('~/Google Drive/Documents/Courses/Coursera - Practical Machine Learning/assignment/coursera-pml/pml-assignment.R')
plot(modFit$finalModel)
plot(modFit$finalModel,log="y")
varImpPlot(modFit$finalModel)
MDSplot(modFit$finalModel,training$classe)
modFit = train(classe ~.,method="rf",data=training, importance=TRUE, proximity=TRUE)
